## Global section must always come first.

[global]
    ## Use local text db by default
    ## Options are: text | ldap | ad
    userdb_type = text

    ## LDAP auth backend configuration
    ## Example:
    ##
    #  ldap_uri = ldaps://ldap.company.com
    #  ldap_bind_dn = cn=admin,dc=company,dc=com
    #  ldap_base_dn = ou=people,dc=company,dc=com
    #  ldap_nthash_attr = tsmbNTPassword
    #  ldap_username_attr = username
    #  ldap_timeout = 30
    #  ldap_bind_pw = secretpassword

    ## When using userdb_text backend, path to user database file
    userdb_file = /var/lib/tsmb/users_db.txt

    ## Location of privileges data
    # privilegedb = /tmp/build/arm-rt-ax82u-v2-bcm6750-tsmb-kernel-r5/var/lib/tsmb/privilege

    ## Auxiliary directory where TSMB application keeps runtime files
    runstate_dir = /var/lib/tsmb

    ## Register IPC share?
    enable_ipc = true

    ## Primary domain of the server:
    ## - for standalone servers: NetBIOS name of the workgroup
    ##   (a string of characters no longer than 15 bytes)
    ## - for domain-joined server: DNS name of AD domain
    domain = MYDOMAIN

    ## Server name. If this is not set, local hostname is used.
    ## The length of the name can not exceed 15 bytes
    ## because of NetBIOS limitations
    #server_name = myserver

    ## An optional string that specifies a comment that describes the server.
    #server_comment =

    ## Listen address(es). This option can be specified multiple
    ## times to start listening on multiple addresses. The format is:
    ##
    ##   interface,address,family,port,proto[,params]
    ##
    ## Where:
    ##   'interface' - interface name on which to listen to. It can be set
    ##                 to ANY to listen on all interfaces.
    ##   'address'   - IPv4 or IPv6 address on which to listen. The format
    ##                 of the value depends on 'family'. If you don't want
    ##                 to specify the particular address use '0.0.0.0' for
    ##                 'IPv4' family and '::' for IPv6 address family.
    ##   'family'    - address family and transport type.
    ##                 To listen on both IPv4 and IPv6,
    ##                 specify the 'listen' parameter twice, once for IPv4,
    ##                 once for IPv6.
    ##   'port'      - TCP/UDP port number to listen to.
    ##   'proto'     - Transport protocol to use on the connections opened
    ##                 over specified 'port'/'address'/'interface'.
    ##                 possible values:
    ##                   * DIRECT_TCP - use Direct TCP transport
    ##                                  (see [MS-SMB2] 2.1).
    ##                   * NBSS       - use NetBIOS Session Service over TCP
    ##                                  (see [RFC1001], [RFC1002]).
    ##                   * NBNS       - use NetBIOS Name Service over UDP
    ##                                  (see [RFC1001], [RFC1002]).
    ##                   * NBDS       - use NetBIOS Datagram Service over UDP
    ##                                  (see [RFC1001], [RFC1002]).
    ##                 The default value is 'DIRECT_TCP'.
    ##   'params'    - Optional comma-separated list of parameters. Following
    ##                 are the supported parameters:
    ##                   * RSS=<Number of RSS queues>
    ##                                - Modern NICs have multiple queues that
    ##                                  are meant for distributing the
    ##                                  processing of incoming packets among
    ##                                  CPUs. This technique is called RSS
    ##                                  (Receive Side-Scaling). Windows client
    ##                                  can leverage RSS capability of cards by
    ##                                  opening multiple channels or network
    ##                                  connections over a single NIC.
    ##                                  By default, if this value is not
    ##                                  configured, TSMB will automatically
    ##                                  detect the RSS capability of a NIC. But
    ##                                  it's possible to override this behavior
    ##                                  by user-configured values. A value of
    ##                                  '0' disables RSS. This option accepts
    ##                                  values in range [0, UINT32_MAX - 1].
    ## Example:
    ##
    ##   listen = eth0,0.0.0.0,IPv4,445,DIRECT_TCP
    ##   listen = eth0,0.0.0.0,IPv4,445,DIRECT_TCP,RSS=2
    ##   listen = ANY,::,IPv6,445,DIRECT_TCP
    ##   listen = ANY,::,IPv6,445,DIRECT_TCP,RSS=0
    ##   listen = ANY,::,IPv4,139,NBSS
    ##
    ## Note: no whitespace is allowed!
    listen = ANY,0.0.0.0,IPv4,445,DIRECT_TCP
    listen = ANY,::,IPv6,445,DIRECT_TCP
    listen = ANY,0.0.0.0,IPv4,139,NBSS

    ## Enabled protocol dialects. Supported dialects are, in ascending
    ## order:
    ##
    ## SMB1
    ## SMB2.002
    ## SMB2.1
    ## SMB3.0
    ## SMB3.02
    ## SMB3.1.1
    ##
    ## You can specify either a list of dialects, like
    ##
    #    dialects = SMB1 SMB2.002
    ##
    ## or a maximum dialect:
    ##
    #    dialect_max = SMB3.02
    dialects = SMB1 SMB2.002 SMB2.1 SMB3.0 SMB3.02 SMB3.1.1

    ## Whether to allow guest sessions
    allow_guest = false

    ## Whether to allow data access via null sessions
    null_session_access = false

    ## A Boolean that, if set, indicates that this node requires that messages
    ## MUST be signed if the message is sent with a user security context that
    ## is neither anonymous nor guest. If not set, this node does not require
    ## that any messages be signed, but can still choose to do so if the other
    ## node requires it.
    require_message_signing = false

    ## Server requires messages to be encrypted after session establishment.
    encrypt_data = false

    ## Server will reject any unencrypted messages. This flag is applicable
    ## only if 'encrypt_data' (global or per-share) is 'true'.
    reject_unencrypted_access = true

    ## Whether to enable CIFS UNIX extensions as defined by SNIA and HP
    ## default: unix_extensions = false
    unix_extensions = false

    ## Controls how TSMB processes incoming packets from SMB clients over TCP.
    ## Any incoming requests to write data to a file, where length is above
    ## this threshold will be handled in a way that allows TSMB to leverage
    ## OS-specific zerocopy writes directly from network socket buffer to
    ## to filesystem's page cache.
    ##
    ## In user-space, TSMB makes use of splice() to perform zerocopy writes.
    ## splice() makes use of pipes for enabling zerocopy write operations.
    ##
    ## If set to 0, TSMB disables zerocopy writes and processes write requests
    ## normally. Disabling zerocopy using this option will disable zerocopy
    ## write operation globally irrespective of the per-share option
    ## 'vfs_zerocopy_write'.
    ##
    ## Default: 0    (Disabled for user-space TSMB)
    ##          8192 (Enabled for kernel-space TSMB)
    #
    #vfs_zerocopy_write_threshold = 0

    ## Controls the SMB2 protocol value that the server shares with a client,
    ## communicating the maximum size of buffer that may be used for QUERY,
    ## SET, and NOTIFY operations.
    ##
    ## The maximum value supported by the server varies based on the SMB2
    ## dialect. For SMB2 dialect version 2.002 the maximum is 64 KB and for all
    ## other higher dialect versions, it is limited to 8388608 (8 MB).
    ##
    ## Default: smb2_trans_max = 1048576
    #smb2_trans_max = 8388608

    ## Controls the SMB2 protocol value that the server shares with a client,
    ## communicating the maximum size of data that the server can return in a
    ## single READ request.
    ##
    ## The maximum value supported by the server varies based on the SMB2
    ## dialect. For SMB2 dialect version 2.002 the maximum is 64 KB and for all
    ## other higher dialect versions, it is limited to 8388608 (8 MB).
    ##
    ## Default: smb2_read_max = 1048576
    #smb2_read_max = 8388608

    ## Controls the SMB2 protocol value that the server shares with a client,
    ## communicating the maximum size of data that the client may send to the
    ## server in a single WRITE request.
    ##
    ## The maximum value supported by the server varies based on the SMB2
    ## dialect. For SMB2 dialect version 2.002 the maximum is 64 KB and for all
    ## other higher dialect versions, it is limited to 8388608 (8 MB).
    ##
    ## Default: smb2_write_max = 1048576
    #smb2_write_max = 8388608

    ## A boolean, if set, indicates whether the server will allow a client to
    ## place an opportunistic lock (oplocks) on a remote file. These locks are
    ## used by the client to cache data and file handles locally.
    ##
    ## Allowing SMB clients to cache data locally, the server can drastically
    ## improve access to the file.
    ##
    ## Default: enable_oplock = true
    ##enable_oplock = true
    enable_oplock = true

    ## Enable TCP tickle ACK for connections terminated without
    ## normal TCP termination. 
    ## Default: tcp_tickle = false

    ## Parameters for TCP tickle ACK module.
    ## Currently supported parameters:
    ## - path - path to a dedicated directory on a volume shared
    ##          between fail-over cluster nodes
    ## tcp_tickle_params = path=<auxiliary path>


    ## This option allows the user to set the destination where the debug log
    ## messages are sent/printed . Currently TSMB accepts the following
    ## destinations as input:
    ##
    ## "console"    - Logs TSMB debug messages to 'stdout' and to 'stderr' in
    ##                case of error messages.
    ##
    ## "syslog"     - Logs TSMB debug messages to the system's syslog.
    ##
    ## "file"       - logs TSMB debug messages in to a file.
    ##
    ## TSMB supports logging into one of the modes. These modes are mutually
    ## exclusive.
    ##
    ## Each log message in the configuration file follows the following pattern:
    ## <debug header> <debug message>.
    ##
    ## "debug header"    - May contain the following information:
    ##                     = Name of module that printed the message
    ##                     = Function name (debug-mode only)
    ##                     = Line in function (debug-mode only)
    ##                     NOTE: Debug header field is not mandatory.
    ##
    ## "debug message"   - The original debug message printed by the module.
    ##
    ## Default: log_destination = console
    log_destination = console

    ## This option allows to specify the debug level or logging level of the
    ## debug messages. The supported logging levels are:
    ##
    ## '0'      - None      (No logging)
    ## '1'      - Critical  (Critical conditions)
    ## '2'      - Error     (Error conditions)
    ## '3'      - Warning   (May indicate an error, and may require action)
    ## '4'      - Info      (Informational messages and requires no action)
    ## '5'      - Debug     (Messages for developers for debugging)
    ##
    ## The levels defined in TSMB are very similar to the severity levels
    ## defined for syslog in RFC5424.
    ##
    ## As of now, levels '4' and '5' are not available for normal users and
    ## is only available in debug/developers builds of the TSMB.
    ##
    ## If this option is not explicitly specified, then TSMB uses level '3'
    ## as default.
    ##
    ## Default: log_level = 3
    log_level = 3

    ## This option allows to specify parameters required for logging.
    ## This option accepts a list of parameters separated by comma ','.
    ##
    ## The supported parameters are:
    ##
    ## "path=<path/to/file>"   - The path to a valid file to be used for
    ##                           logging debug message when
    ##                           "log_destination = file".
    ##                           This parameter is MANDATORY if "file" is used
    ##                           as the logging mode.
    ##
    ## "trace=[true|false]"    - Whether to enable tracing when printing debug
    ##                           messages. This option prepends additional info
    ##                           to the original debug message with info such
    ##                           as:
    ##                           - function name
    ##                           - line number
    ##                           NOTE: This option is only available in
    ##                                 debug/developer builds.
    ##
    ## "long=[true|false]"      - Whether the debug message will be dumped
    ##                            without any truncation or strictly truncated.
    ##                           <debug header> truncated to 80 characters
    ##                           <debug message> truncated to 128 characters
    ##                           If not specified (disabled), then only the total
    ##                           of 128 + 180 + newline character to be printed
    ##                           for each message.
    ##                           if enabled, this would attempt to print the
    ##                           entire log messages, which may incur a
    ##                           performance penalty.
    ##                           Disabled by default.
    ##
    ## "timestamp=[true|false]"- Whether the <debug header> will be prefixed with
    ##                           timestamps in the format: [DD/MM/YYYY HH:MM:SS]
    ##                           Disabled by default.
    ##
    ## There are no defaults for this parameter.
    log_params = path=/var/lib/tsmb/tsmb.log

    ##
    ## Timeout value (in seconds) to use for Durable Opens created
    ## by means of "DHnQ" create context.
    ## "DHnQ" is used by Windows 7 and Windows Vista to create durable
    ## Open handle (a handle that can be reconnected after network outage).
    ## "DHnQ" does not provide a way for a client to specify desired
    ## durable timeout, i.e. the time during which SMB server will wait
    ## for client to reclaim the handle.
    ## Default: 960 seconds (16 minutes)
    ##
    durable_v1_timeout = 960

    ##
    ## Timeout value (in seconds) to use for Durable Opens created
    ## by means of "DH2Q" create context.
    ## "DH2Q" is used by Windows 8, 8.1, 10.
    ## With "DH2Q" create context clients can specify desired durable
    ## timeout, but if/when client does not specify the timeout in "DH2Q"
    ## SMB server will use this value.
    ## Default: 180 seconds (3 minutes)
    ##
    durable_v2_timeout = 180

    ##
    ## Control the maximum number of files that can be kept opened simultanesouly
    ## in a single user-session.
    ##
    ## The default is set to 1024. A value of zero means an unlimited number of
    ## files can be opened in a single user-session.
    ##
    ## The value configued in this option should never be greater than the
    ## value set in configuration option ("open_files_max"). Setting to a higher
    ## value will show a warning and automatically default the value to 1024.
    ##
    ## When the SMB server encounters one of the following limits, namely,
    ## 1. Per user-session open limit or
    ## 2. TSMB server open limit (see option "open_files_max") or
    ## 3. Operating system wide or per-process wide limit on the open files,
    ## Then the SMB server will start responding clients with NT status,
    ## STATUS_TOO_MANY_OPENED_FILES, which is the POSIX equivalent of
    ## ENFILE or EMFILE.
    ##
    ## Default: 1024 (max open files per user-session)
    #sess_open_files_max = 1024

    ##
    ## Control the maximum number of files that can be kept open, simultaneously,
    ## by all clients connected to the SMB server.
    ##
    ## All values less than a minimum supported value (1024) are considered
    ## invalid and TSMB will reset them back to 1024.
    ## A value of zero means to use maximum per-process system-supported
    ## limit (value of /proc/sys/fs/nr_open).
    ##
    ## The value configued in this option should never be greater than the
    ## operating system defined per-process limit on the maximum number of open
    ## files. Ignoring this might result in an undefined server behavior.
    ##
    ## Warning: Setting this to a very high value on devices with considerably
    ##          low memory may result in a highly fragmented memory. This can lead
    ##          to premature OOM trigger especially in TSMB kernel version.
    ##          Care must be taken when modifying this to larger values.
    ##
    ## IMPORTANT:
    ## ----------
    ## This configuration option ("open_files_max") and "connections_max"
    ## controls the maximum open descriptors that this process will consume.
    ## Hence operating system wide or process-wide limit on the number of open
    ## file descriptors should be configured appropriately to accommodate these.
    ## Incorrect configuration might cause an undefined SMB server behavior.
    ##
    ## Default: 8192 (max open files)
    #open_files_max = 0

    ##
    ## Controls the maximum number of simultaneous client connections that the
    ## server can accept.
    ##
    ## The default is set to 1024 and the user can configure any value for this
    ## parameter. If the SMB server is already servicing maximum number of
    ## client connections, then any new connections will be dropped.
    ##
    ## A special value zero means an unlimited number of connections will be
    ## accepted, unless the system-wide or process-wide open descriptor limit
    ## is reached.
    ##
    ## IMPORTANT:
    ## ----------
    ## This configuration option ("connections_max") and "open_files_max"
    ## controls the maximum open descriptors that this process will consume.
    ## Hence operating system wide or process-wide limit on the number of open
    ## file descriptors should be configured appropriately to accommodate these.
    ## Incorrect configuration might cause an undefined SMB server behavior.
    ##
    ## Default: 1024 (max client connections)
    #connections_max = 0

    ##
    ## Controls the maximum number of authenticated SMB user sessions
    ## that can be established on the server. By default, the server
    ## does not limit the number of authenticated sessions.
    ## This behavior can be explicitly specified using a special value
    ## zero ('0'). However, restrictions may be imposed by other factors
    ## such as lack of availability of system resources like memory to
    ## setup new sessions or due to other implementation-specific limit(s).
    ##
    ## Default: unlimited (max sessions)
    #sessions_max = 0

    ## Specify the number of transport threads to use for Rx operations.
    ## If configured with zero, use pre-configured number (DEFAULT is 1)
    ## of threads for processing incoming packets from all SMB clients.
    ##
    ## Increasing the number of Rx threads can improve performance for
    ## use cases with many clients working in parallel or when there are
    ## multiple connections from a single client (multichannel).
    ##
    ## Default: 1 (handle incoming packets in a single thread)
    #transport_rx_threads = 10

    ## Specify the number of transport threads to use for Tx operations.
    ## If configured with zero, use pre-configured number (DEFAULT is 1)
    ## of threads for transmitting outgoing packets to all SMB clients.
    ##
    ## Increasing the number of Tx threads can improve performance for
    ## use cases with many clients working in parallel or when there are
    ## multiple connections from a single client (multichannel).
    ##
    ## Default: 1 (handle outgoing packets in a single thread)
    #transport_tx_threads = 10

    ## Controls the number of threads in the global pool, available for metadata
    ## operations.
    ##
    ## To configure a generic global pool of threads, rather than two separate
    ## pools for metadata or data operations, set one of the either configuration
    ## options namely, "vfs_metadata_threads" or "vfs_data_threads" as zero (0).
    ##
    ## If both the above said configuration options are set to 0, then TSMB will
    ## allocate one (1) thread per data and metadata pool. This is done so that
    ## shares without a configured private pool will make use of the global pool
    ## of threads.
    ##
    ## Default: 1 (metadata thread)
    ##vfs_metadata_threads = 10

    ## Controls the number of threads in the global pool, available for data
    ## operations.
    ##
    ## To configure a generic global pool of threads, rather than two separate
    ## pools for metadata or data operations, set one of the either configuration
    ## options namely, "vfs_metadata_threads" or "vfs_data_threads" as zero (0).
    ##
    ## If both the above said configuration options are set to 0, then TSMB will
    ## allocate one (1) thread per data and metadata pool. This is done so that
    ## shares without a configured private pool will make use of the global pool
    ## of threads.
    ##
    ## Default: 1 (data thread)
    ##vfs_data_threads = 10

    ## Distributed File System (DFS) feature
    ## This parameter should be set to 'true' if you want SMB
    ## server to export DFS capability to clients at negotiation
    ## step (setting SMB2_GLOBAL_CAP_DFS Capability bit in SMB2
    ## NEGOTIATE Response).
    ## You must set this parameter to true if you want to have
    ## at least one share that presents in DFS tree structure.
    ## Default: false - DFS capability is not enabled
    ##dfs = true

    ## SMB3 Multichannel
    ##
    ## This option controls enabling SMB3 multichannel. This option is enabled
    ## by default. If both the client and server have this enabled, then the
    ## SMB client will automatically detect and use multiple network connections
    ## over multiple network interfaces (if any).
    ##
    ## In order to enable SMB Direct (SMB over RDMA), SMB Multichannel is used,
    ## for detecting RDMA capabilities of a network interface card. If
    ## Multichannel is disabled, then TCP/IP will be used over RDMA capable
    ## NICs.
    ##
    ## Default: true
    #multichannel = false

    ## Services Watchdog Timeout
    ##
    ## TSMB supports a watchdog service, which monitors the health of major
    ## services (processes/threads) like authentication service, server
    ## service, etc, using a keepalive request-response mechanism.
    ##
    ## This parameter defines the time interval (in seconds) to wait
    ## for a keepalive response. If the keepalive response does not come in
    ## this interval, then watchdog terminates all the services.
    ##
    ## If configured with '0', then the default timeout value is used.
    ##
    ## WARNING:
    ## --------
    ## This value must be configured to a reasonably higher value. Extremely
    ## small values can cause TSMB to terminate very easily under extreme load.
    ## For instance, if a lot of users (e.g, 1000) are trying to
    ## authenticate at the same time, then authentication service can take
    ## sometime to process each authentication request. If the keepalive
    ## timeout is kept very small, then authentication service will fail to
    ## respond to a watchdog keepalive request within the timeout, thus
    ## terminating the process, even though it was healthy.
    ## Ideally this option should never be modified from it's default value.
    ##
    ## Default: 200 (seconds)
    ## watchdog_timeout = 200
[/global]

[share]
   netname = SH1
   remark = Test Share
   path = /tmp

   ## Whether to enable VSS (Volume Shadow Copy) feature on
   ## the share or not.
   ##
   ## Default: false

   ## Parameters of VSS:
   ## - path - Path to the directory where the snapshot roots are located;
   ##          Under this directory there should be subdirectories in
   ##          the following format: '@GMT-YYYY.MM.DD-hh.mm.ss'
   ## - share_root - Relative path inside shapshot directory from snapshot 
   ##                root to a share root
   ##
   ## In order to understand the configuration parameters better let's have
   ## a look at potential set-up:
   ## * volume mount point:
   ##     /mnt/disk
   ## * path to share, that will be configured as the value of 'path' share
   ##   configuration:
   ##     /mnt/disk/shares/sh1
   ## * directory under which we will mount volume snapshots:
   ##     /mnt/disk_snapshots
   ## an example of snapshot mount point:
   ##     /mnt/disk_snapshot/@GMT-2019.11.11-12.10.10
   ## directory that we need to export as a snapshot:
   ##     /mnt/disk_snapshot/@GMT-2019.11.11-12.10.10/shares/sh1
   ## For this set-up the configuration will look like:
   ## [share]
   ##   netname = vss_share
   ##   path = /mnt/disk/shares/sh1
   ##   vss = true
   ##   vss_params = path=/mnt/disk_snapshots,share_root=shares/sh1
   ##   ...
   ## [/share]
   ##
   ## Apart from generic vss parameters there can be backend specific
   ## parameters. TSMB supports 'lvm' backend with the following additional
   ## parameters:
   ## - vg_name - Logical volume group name associated with logical volume
   ##             where the share is located
   ## - fs_type - The type of file system on logical volume (necessary to
   ##             do automatic mount of snapshot under snapshot root).
   ##
   ##vss = true
   ##vss_params = path=/mnt/lvm/snapshots,vg_name=test_group,fs_type=ext4,share_root=/

   # Control whether this share is not visible in the list of available shares.
   # Default: false
   #hidden = true

   ## Control whether this share is present in a DFS tree structure.
   ## Default: false
   ##dfs = true

   ## Control whether file access over this share should be
   ## case-insensitive or not.
   ## Please note that to make this feature work TSMB must be
   ## compiled with 'case-insensitive' feature. You can check if
   ## this feature is available in TSMB by running 'tsmb-server -v'.
   ## Default: false
   ##case_insensitive = true

   ## A set of patterns used as a filter to allow accessing and listing
   ## files. File names are compared against the patterns configured
   ## using this option and if it matches then the file is accessbile
   ## by SMB clients (create, open) and visible (list operation).
   ## Each pattern in the list MUST be separated by a '|' and can contain
   ## entries like '?' and '*', that specify wildcard when applicable for
   ## mutliple files. The delimiter '|' also allows for spaces in
   ## the included entry.
   ##
   ## Please note that this option is only valid for files, not directories.
   ## So with this option you can only limit which files to display. All
   ## the directories will be visible and accessible.
   ##
   ## E.g., To display files containing extensions such as .foo and .bar
   ## and for displaying files containing the keyword, foobar
   ##
   ## files_allow = *.foo|*.bar|*foobar*

   ## A set of patterns used as a filter to deny accessing and visibility
   ## of the files and directories that match them.
   ##
   ## Please note that unlike 'files_allow' option, this option is applicable
   ## for both files and directories.
   ##
   ## Please note that if a file name matches with both 'files_allow'
   ## and 'files_deny' patterns, then precedence has 'files_deny', i.e.
   ## the file won't be accessible, nor visible.
   ##
   ## files_deny = *.foo|*.bar|*foobar*

   ## Share access permissions, as the list of access-allowed ACEs
   ## in the form "<id1>:<access1>, <id2>:<access2>. ...", where
   ##   <id> is predefined group ("everyone", "authenticatedusers"),
   ##           or user name ("user")
   ##           or system group name ("@group")
   ##   <access> is one of "read", "change", "full"
   ##
   ## Use this to specify read-write share, or to grant access only to
   ## specific users. Note, that share access rights are combined
   ## with file system access rights
   ##
   ## default: "everyone:read"
   permissions = everyone:full

   ## This boolean, controls whether the server only issues level2 or
   ## read-only oplock to the SMB clients.
   ##
   ## In environments which may involve no write access but mostly
   ## read-only access to file, this options can increase performance.
   ##
   ## This option is only applicable if 'enable_oplock = true'.
   ##
   ## For more information on oplocks, refer [MS-SMB2] or [MS-SMB]
   ## or File Systems Behavior Overview document [FSBO] provided by
   ## Microsoft.
   ##
   ## Default: force_level2oplock = false
   ##force_level2oplock = true

   ## Configuration string for VFS
   ##   <type> VFS type label
   ##   <parameter=value> the list of parameters for VFS of specified type
   ## vfs = <type>:[<parameter=value>*]

    ## Controls the number of threads in the share's private pool, available for
    ## metadata operations.
    ##
    ## To configure a generic pool of threads, rather than two separate pools for
    ## metadata or data operations, set one of the either configuration options
    ## namely, "vfs_metadata_threads" or "vfs_data_operations" as zero (0).
    ##
    ## If both the above said configuration options are set to 0, then this share
    ## will make use of the global thread pool for VFS.
    ##
    ## Default: 0 (metadata thread)
    ##vfs_metadata_threads = 10

    ## Controls the number of threads in the share's private pool, available for
    ## data operations.
    ##
    ## To configure a generic pool of threads, rather than two separate pools for
    ## metadata or data operations, set one of the either configuration options
    ## namely, "vfs_metadata_threads" or "vfs_data_operations" as zero (0).
    ##
    ## If both the above said configuration options are set to 0, then this share
    ## will make use of the global thread pool for VFS.
    ##
    ## Default: 0 (data thread)
    ##vfs_data_threads = 10

   ## Whether this share is continuously available or not
   ## default: ca = false 

   ## Ca share specific paramters.
   ## Supported parameters:
   ## - path - path to a dedicated directory on a volume shared between
   ##          fail-over cluster nodes
   ## - durable - if specified means treat Durable handles like Persistent,
   ##             i.e. save them in non-volatile storage
   ## ca_params = path=<auxiliary path>

   ## Comma-separated list of backends for mapping Windows file attributes
   ## to persistent storage entities.
   ## Supported options:
   ##   - posix-exec:<attributes>
   ##         map attributes to POSIX exec permission bits.
   ##         valid attributes are:
   ##         "A" (archive), stored as u+x if enabled
   ##         "S" (system), stored as g+x if enabled
   ##         "H" (hidden), stored as o+x if enabled
   ##   - native
   ##         use filesystem native attributes (for FAT/exFAT/NTFS)
   ##   - xattr[:<version>]
   ##         use Samba-compatible extended attribute user.DOSATTRIB
   ##         Optional argument specifies version of user.DOSATTRIB
   ##           to use for new files: "v3" (Samba 3.5-4.10),
   ##           "v4" (Samba 4.11-, default)
   ##   - filename:<attributes>:<pattern>
   ##         treat files matched to "pattern" as always having "attributes",
   ##         <attributes> is a string combined from "A" (archive),
   ##            "H" (hidden), "R" (read-only), "S" (system) characters,
   ##         <pattern> is wildcard for filenames
   ##         (Note: only pattern ".*" is currently supported)
   ## default: map_attributes = posix-exec:A

   ## Controls the way TSMB processes write requests from a client. When
   ## enabled and if the underlying VFS supports it, then TSMB attempts to
   ## perform zero-copy writes from network socket buffers to file-system
   ## page-cache pages (buffers).
   ## Enabling this option may improve performance and so this option
   ## should be tested for any real-world performance benefits.
   ##
   ## If explicitly disabled, TSMB falls back to performing the conventional
   ## read from socket to buffer and write from buffer to file mechanism for
   ## write requests from client.
   ##
   ## This option will have no effect on compounded messages, signed, and
   ## encrypted connections.
   ##
   ## Since zerocopy write relies on writing data directly from socket buffers
   ## to file, if the global configuration option 'vfs_zerocopy_write_threshold'
   ## is set to 0 (zero), then zerocopy writes are disabled globally. In other
   ## words disabling zerocopy writes globally using
   ## 'vfs_zerocopy_write_threshold' takes precedence over the per-share option.
   ##
   ## Default: vfs_zerocopy_write = true
   #vfs_zerocopy_write = false

    ## Two options to specify range of values for which to invoke
    ## fallocate() system call on creating a file or setting file
    ## allocation. Each of these configuration options can have value
    ## from 0 to 2^{64}-1 (UINT64_MAX).
    ##
    ## Call fallocate() when the desired size of allocation is in range
    ## [vfs_fallocate_min, vfs_fallocate_max].
    ##
    ## vfs_fallocate_min - Minimum value (in bytes) in the range of allowed
    ##                     values for allocation
    ## vfs_fallocate_max - Maximum value (in bytes) in the range of allowed
    ##                     values for allocation
    ##
    ## default: vfs_fallocate_min = 0
    ## default: vfs_fallocate_max = 0
    ## The default value is to disable fallocate() system call
[/share]

[share]
   netname = SH2
   remark = Encrypted Test Share
   path = /tmp
   encrypt_data = true
   permissions = everyone:full
[/share]
